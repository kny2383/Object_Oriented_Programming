#include <iostream>
using namespace std;

int main() {
	int M[3][3] = { {1,2,3},{4,5,6},{7,8,9} }; // 2차원 배열 M
	int(*ptr)[3]; // 배열포인터 ptr -> 배열을 가리키는 포인터 (2차원 배열을 포인터로 사용하기 위해서는 배열포인터로 사용하는 것이 좋다.)
	int* p; // 포인터 변수 p
	int** pt; // 이중포인터 변수 pt (이중포인터란 포인터변수를 가리키는 포인터변수)

	ptr = M; // ptr이 M 배열에 저장되어 있는 메모리 주소값을 갖도록 초기화
	cout << "ptr: " << ptr <<"," << " M: " << M << endl; // ptr과 M은 &M[0]과 같다. 주소값을 출력함
	cout << "ptr+1: "<< ptr+1 <<  "," << " M+1: "<< M+1 << endl; // ptr+1과 M+1은 &M[1]과 같다. 주소값을 출력함

	// 주소값 출력
	// *(ptr + 1)은 배열의 이름이다. *(ptr + 1)과 ptr[1]은 같다.
	cout << "*(ptr + 1): " << *(ptr + 1) << "," << " ptr[1]: " << ptr[1] << "," << " *(M + 1): "<< *(M + 1) << "," << " M[1]: "<< M[1] << endl;
	// 원소값 출력
	cout << "**(ptr + 1): "<< **(ptr + 1) << "," << " **(M + 1): "<< **(M + 1) << "," << " *M[1]: " << *M[1] << "," <<" M[1][0]: "<< M[1][0] << endl;
	
	p = M[0]; // M[0]의 주소값을 p에 대입한다.
	cout << "p: "<< p << "," << " M[0]: "<< M[0] << "," << " *M: "<< *M << ","  << endl; // 각 원소의 시작 주소를 가르킴
	cout << "p + 1: "<< p + 1 << "," << " M[0] + 1: "<< M[0] + 1 << "," << " *M + 1: "<< *M + 1 << endl; // +1을 할 경우 M[0][1]로 넘어감
	cout << "*(p + 1): "<< *(p + 1) << "," << " *(M[0] + 1): " << *(M[0] + 1) << "," << " *(*M + 1): "<< *(*M + 1) << endl; // M[0][1]의 원소값
	
	pt = &p; // pt = M; (X) 이중포인터 pt라는 변수에 포인터 변수 p의 주소값을 대입함
	cout << "*pt: "<< *pt << "," << " p: " << p << endl; // *pt는 이중포인터가 아니므로, p의 주소값을 가르킴 
	cout << "**pt: "<< **pt << "," << " *p: " << *p << endl; // **pt는 이중포인터이기 때문에 원소값을 가르킴. 즉 **pt == *p
}